// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  email     String?  @unique @db.VarChar(255)
  username  String   @unique @db.VarChar(255)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  password  String   @db.VarChar(255)
  // posts     Post[]
  // comments  Comment[]
}

// model Post {
//   id        String    @id @default(uuid())
//   title     String    @db.VarChar(255)
//   slug      String    @unique @db.VarChar(255)
//   content   String    @db.Text
//   published Boolean   @default(false)
//   createdAt DateTime  @default(now())
//   updatedAt DateTime  @updatedAt
//   authorId  String
//   author    User      @relation(fields: [authorId], references: [id], onDelete: NoAction)
//   comments  Comment[]
// }

// model Comment {
//   id              String    @id @default(uuid())
//   content         String    @db.Text
//   createdAt       DateTime  @default(now())
//   updatedAt       DateTime  @updatedAt
//   authorId        String
//   author          User      @relation(fields: [authorId], references: [id], onDelete: NoAction)
//   postId          String
//   post            Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
//   parentCommentId String?
//   parentComment   Comment?  @relation("CommentReplies", fields: [parentCommentId], references: [id], onDelete: Cascade)
//   replies         Comment[] @relation("CommentReplies")
// }
